Setup{
	new Board(3,3);
	new Player("A");
	new Player("B");
	new Pieces("A", "X", 6);
	new Pieces("B", "O", 6);
	
}
Rules{
 
 rule R1: if(x < 3 && x > 0) { return true; } else { return false;};
rule R2: if(y < 3 && y > 0) { return true; } else { return false;};			 
 rule R3: if(R1 && R2) { return true;} else {return false;};
 rule R4: return Board[(x,y)].unoccupied();;
rule R5: int i = 1;
 	int j = 1;
        bool full = true; 
	loop(i < 4) { 
	loop (j < 4) { 
	if (Board[(i,j)].unoccupied()) { 
	full = false; } 
	j = j+1; } 
	i = i + 1; }
	 return full;;  
rule R6: int k = 1;
	         int h = 1;
	         int val = 0;
		  bool win = false;
		  /* every row */
		  loop(k<4) {
			/* every col */
			loop(h<4) {
				if (Board[(h,k)].Pieces[1].owner() == Player.name() ) {/* checks if    the owner of the first piece on the board at i,j is owned by the current Player*/
					val = val+1;
				}
				else {
					val = val;
				}
				h = h+1;
			}
			if (val==3) {
				win = true;
			}
			else {
				val = 0;
				k = k+1;
			}
		   }
		   return win;;
rule R7: int l = 1;
		  int m = 1;
		  bool winChance;
		  loop(l < 4){/*every column*/
			winChance = true;
			loop(m < 4){/*every row*/
if(winChance == true && Board[(m, l)].Pieces[1].name() !=   Player.inventory().name()){/*checks if the first piece on the board at j,i has the same name as the first piece in the current player's inventory*/
					winChance = false;	
				}
				m = m + 1;
			}
			if(winChance == true){
				return true;	
			}	
		        l = l + 1;
		  }
		  return false;;

/* diagonal win */
	rule R8: int n=1;
		  int a=0; 
		  loop(1:3)/*goes through each row*/
		  {
			if (Board[(n,n)].Pieces[1].name() == Player.inventory().name()){ /*checks if the first piece on the board at location i,j has the same name as the first piece in the current player's inventory*/
				a = a+1;
			}
			n = n + 1;
		  }
		  if (a==3){
			return true;
		  }
		  else{
		  	return false;
		  };
/*checks if any of the three win contions are satisfied*/
	rule R9: if(R6 || R7 || R8) {
			return true;
		   } 
		   else {
			return false;
		   };


}
Play{
	int q = 1;
loop(1:3){/*displays the current board on the screen*/

	Output(Board[(q,1)].Pieces[1].name() ^  Board[(q,2)].Pieces[1].name() ^ Board[(q,3)].Pieces[1].name());
         q++;
}


	int x;
	int y;

	Input(x);/*takes keyboard input from the user and stores it in the coordinate in*/
	Input(y);
	if(R3){
		add(Player.inventory(), x,y);
		if(R9){
			EndGame("Player " ^ Player.name() ^ " Won");  /* break, display board and output  message */
		}
		else{
			if(R6){
				EndGame("Board Full! No Winner!"); /* break, display board and output message*/
			}
		}
		NextPlayer;
	}
      

}
